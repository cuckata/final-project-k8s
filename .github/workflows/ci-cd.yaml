name: Updated pipeline with deployment to AWS EKS for the k8s cluster and uploading of the docker image to ECR.

on:
  pull_request:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 'latest'

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Terraform Init
      run: |
        cd tf
        terraform init -reconfigure\
          -backend-config="bucket=${{ secrets.BACKEND_BUCKET }}" \
          -backend-config="key=${{ secrets.BACKEND_KEY }}" \
          -backend-config="region=${{ secrets.BACKEND_REGION }}" \
          -backend-config="dynamodb_table=${{ secrets.BACKEND_DYNAMODB_TABLE }}" \
          -backend-config="encrypt=true"

    - name: Terraform Plan
      run: | 
        cd tf
        terraform plan \
          -var="eks_cluster_role_arn=${{ secrets.EKS_CLUSTER_ROLE_ARN }}" \
          -var="eks_nodegroup_role_arn=${{ secrets.EKS_NODEGROUP_ROLE_ARN}}" \
          -var="elb_role_arn=${{ secrets.ELB_ROLE_ARN }}" \
          -var="autoscaling_role_arn=${{ secrets.AUTOSCALING_ROLE_ARN }}"

    - name: Terraform Apply (Create/Update EKS Cluster)
      run: |
        cd tf
        terraform apply -auto-approve \
          -var="eks_cluster_role_arn=${{ secrets.EKS_CLUSTER_ROLE_ARN }}" \
          -var="eks_nodegroup_role_arn=${{ secrets.EKS_NODEGROUP_ROLE_ARN}}" \
          -var="elb_role_arn=${{ secrets.ELB_ROLE_ARN }}" \
          -var="autoscaling_role_arn=${{ secrets.AUTOSCALING_ROLE_ARN }}"

    - name: Fetch ECR Repository URL
      run: |
        cd tf
        terraform output -raw ecr_repository_url

  build-and-push:
    needs: terraform
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL }}

    - name: Build and push Docker image to ECR
      run: |
        if [ -z "$ECR_URL" ]; then
          echo "Error: ECR_URL is not set."
          exit 1
        fi

        # Define IMAGE_NAME using $ECR_URL
        IMAGE_NAME=$ECR_URL

        # Get the first 7 characters of the commit SHA for tagging
        COMMIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)

        # Build the Docker image
        echo "Building Docker image: $IMAGE_NAME:$COMMIT_SHA"
        docker build -t $IMAGE_NAME:$COMMIT_SHA .

        # Tag the image with the "latest" tag
        echo "Tagging Docker image: $IMAGE_NAME:latest"
        docker tag $IMAGE_NAME:$COMMIT_SHA $IMAGE_NAME:latest

        # Push both tags to ECR
        echo "Pushing Docker image: $IMAGE_NAME:$COMMIT_SHA"
        docker push $IMAGE_NAME:$COMMIT_SHA

        echo "Pushing Docker image: $IMAGE_NAME:latest"
        docker push $IMAGE_NAME:latest

  deploy-to-kubernetes:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Update kubeconfig for EKS
      run: |
        aws eks update-kubeconfig --region eu-central-1 --name $(terraform output -raw eks_cluster_name)

    - name: Ensure Service Readiness
      run: |
        kubectl rollout status deployment/my-app --timeout=120s

    - name: Deploy to Kubernetes
      run: |
        cd k8s
        kubectl set image deployment/my-app my-app=${{ secrets.AWS_ECR_URL }}/${{ secrets.AWS_ECR_NAME}}:latest
        kubectl apply -f deployment.yaml
        kubectl apply -f service.yaml

  smoke-tests:
    needs: deploy-to-kubernetes
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Run Smoke Tests
      run: |
        IMAGE_NAME=${{ secrets.AWS_ECR_URL }}/${{ secrets.AWS_ECR_NAME}}
        COMMIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
        docker run --rm $IMAGE_NAME:$COMMIT_SHA ./smoke.sh